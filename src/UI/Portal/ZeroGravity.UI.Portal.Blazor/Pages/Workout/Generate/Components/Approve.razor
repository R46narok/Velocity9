@attribute [Authorize]

@using ZeroGravity.UI.Portal.Blazor.Pages.Workout.Generate.ViewModels
@using ZeroGravity.UI.Portal.Services.Workout.Contracts
@using ZeroGravity.UI.Core.Providers
@using ZeroGravity.UI.Core.Extensions
@using ZeroGravity.UI.Portal.Security
@using ZeroGravity.UI.Portal.Services.Workout.Requests
@using ZeroGravity.UI.Portal.Blazor.Pages.Workout.Common
@using ZeroGravity.UI.Portal.Services.Workout.Views

@inherits ZeroGravity.UI.Portal.Blazor.Pages.Workout.Generate.Common.DisplayComponentControl

@inject TokenAuthenticationStateProvider _authenticationProvider
@inject IWorkoutClient _client
@inject ISetClient _setClient
@inject IMapper _mapper

<div class="col-7 d-flex align-items-center" style="border-top-right-radius: 20px;border-bottom-right-radius: 20px;/*background-color: #23262F;*/">
    <div class="p-5">
        <span class="fw-bold px-2 text-white" style="background-color: #9757D7;border-radius: 5px;">DEEP LEARNING</span>
        <h1 class="text-white mt-3">Approve your next<br>workout</h1>
        <p class="mt-3" style="color: #777E90;">Our well trained recursive neural network algorithm predicts your next workout by taking into account your previous training experience.</p>

        <div class="row pt-3 text-white" style="border-radius: 20px;background-color: #23262F;">
            <ExerciseBanner Name="@_exerciseSplit?[_exerciseActive][0].ExerciseName"
                            Sets="@_exerciseSplit?[_exerciseActive].Count"
                            OnNextButtonClicked="OnNextButtonClicked"
                            OnExpandButtonClicked="OnExpandButtonClicked"
                            ShowIntensity="@false"/>
        </div>

        <div class="text-white" style="animation: @(_showSets ? "fadeAndScale" : "fadeAndScaleReverse") 0.75s cubic-bezier(.39,-1.05,.58,1.95);transform-origin: center bottom;">
            @if (_showSets && _exerciseSplit?.Count > 0)
            {
                for (int i = 0; i < _exerciseSplit?[_exerciseActive].Count; ++i)
                {
                    <div class="row pt-3 mt-4"
                         style="width: 90%;border-radius: 20px;background-color: #23262F;">
                        <TargetSetBanner SetView="_exerciseSplit[_exerciseActive][i]" Index="@(i + 1)"/>
                    </div>
                }
            }
        </div>
    </div>

    <button
        @onclick="OnSubmitButtonClicked"
        class="btn btn-primary fw-bold" type="button" style="border-radius: 20px;">
        Submit
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="-32 0 512 512" width="1em" height="1em" fill="currentColor" class="ms-2" style="vertical-align: sub;">
            <path d="M438.6 278.6l-160 160C272.4 444.9 264.2 448 256 448s-16.38-3.125-22.62-9.375c-12.5-12.5-12.5-32.75 0-45.25L338.8 288H32C14.33 288 .0016 273.7 .0016 256S14.33 224 32 224h306.8l-105.4-105.4c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l160 160C451.1 245.9 451.1 266.1 438.6 278.6z"></path>
        </svg>
    </button>
</div>

@code {

    [Parameter, EditorRequired]
    public GenerateWorkoutViewModel? Model { get; set; }

    private PredictedWorkoutViewModel? _viewModel;
    private List<List<SetView>>? _exerciseSplit;
    private int _exerciseActive = 0;
    private bool _showSets;

    protected override async Task OnInitializedAsync()
    {
        if (Model is null) throw new ArgumentException();

        var token = await _authenticationProvider.GetTokenAsync();
        var response = await _client.PredictWorkoutAsync(BearerHeader.Construct(token!));

        if (response.IsSuccessStatusCode)
        {
            var content = response.Content;
            _viewModel = _mapper.Map<PredictedWorkoutViewModel>(content);
            _exerciseSplit = ConvertPredictedWorkoutViewModelToSetViews(_viewModel);
        }
    }

    private List<List<SetView>> ConvertPredictedWorkoutViewModelToSetViews(PredictedWorkoutViewModel viewModel)
    {
        int len = viewModel.Exercises.Count;
        var setViews = new List<List<SetView>>();

        string last = viewModel.Exercises[0];
        var split = new List<SetView>();
        for (int i = 0; i < len; ++i)
        {
            var exercise = viewModel.Exercises[i];
    // var reps = viewModel.Reps[i];

            var setView = new SetView {ExerciseName = exercise, TargetReps = 10};
            if (exercise != last)
            {
                setViews.Add(split);
                split = new List<SetView>();
            }
            split.Add(setView);

            last = exercise;
        }

        setViews.Add(split);

        return setViews;
    }

    private async Task OnSubmitButtonClicked()
    {
        var bearer = BearerHeader.Construct((await _authenticationProvider.GetTokenAsync())!);
        var workout = new CreateWorkoutRequest(Model!.Name, Model.Notes, 0);

        var response = await _client.CreateWorkoutAsync(workout, bearer);
        if (response.IsSuccessStatusCode)
        {
            await OnCreateWorkoutSuccess();
        }
    }

    private async Task OnCreateWorkoutSuccess()
    {
        var userName = (await _authenticationProvider.GetAuthenticationStateAsync()).GetUserName();
        var request = new CreateSetRequest
        {
            UserName = userName,
            WorkoutName = Model!.Name,
            Notes = string.Empty,
        };

        for (int i = 0; i < _exerciseSplit!.Count; ++i)
        {
            for (int j = 0; j < _exerciseSplit[i].Count; ++j)
            {
                var set = _exerciseSplit[i][j];
                request.TargetReps = 10;
                request.CompletedReps = set.CompletedReps;
                request.ExerciseName = set.ExerciseName;
                var response = await _setClient.CreateSetAsync(request);
            }
        }
    }

    private void OnNextButtonClicked()
    {
        if (_exerciseActive >= _exerciseSplit?.Count - 1)
            _exerciseActive = 0;
        else ++_exerciseActive;

        StateHasChanged();
    }

    private void OnExpandButtonClicked()
    {
        _showSets = !_showSets;
        StateHasChanged();
    }

}