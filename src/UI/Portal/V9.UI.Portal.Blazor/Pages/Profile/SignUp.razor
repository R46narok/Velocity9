@page "/SignUp"
@using V9.UI.Core.Providers
@using V9.UI.Portal.Services.Authorization.Contracts
@using V9.UI.Portal.Services.Authorization.Requests
@using System.Text.Json

@inject NavigationManager NavigationManager
@inject TokenAuthenticationStateProvider StateProvider
@inject IAuthenticationClient AuthenticationClient
@inject IAuthorizationClient AuthorizationClient

<section>
    <div class="container d-flex justify-content-center">
        <div class="row mx-5 my-5">
            <div class="col d-flex align-items-center">
                <img src="/img/dumbbell-dark.png" style="/*animation-duration: 2;*/animation: fadeAndScale 1.5s cubic-bezier(.39,-1.05,.58,1.95);transform-origin: center bottom;">
            </div>
            <div class="col-5 text-wrap align-items-center d-flex" style="border-radius: 20px;">
                <div>
                    <p class="fw-bold mb-0" style="font-size: 16px;color: #777E90;">ONE STEP CLOSER.</p>
                    <h1 class="text-white fw-bold my-0" style="font-size: 48px;">Join the community</h1>
                    <p class="my-2 text-wrap" style="color: #B1B5C3;font-size: 16px;">Discover the world of AI-powered workouts, where machines are taking over the fitness industry.</p>
                    <EditForm Model="@_model" OnValidSubmit="@HandleValidSubmitAsync" class="mt-4">
                        <DataAnnotationsValidator/>
                        <div class="border-1" style="border-radius: 20px;border: 1px solid #777E90;/*border-radius: 20px;*//*border-color: white;*/">
                            <div class="input-group p-1" style="/*border-radius: 20px;*//*border-color: white;*/">
                                <InputText @bind-Value="_model.UserName" class="form-control bg-dark border-0 shadow-none text-white" type="text" placeholder="Username"/>
                            </div>
                        </div>
                        <div class="border-1 mt-3" style="border-radius: 20px;border: 1px solid #777E90;/*border-radius: 20px;*//*border-color: white;*/">
                            <div class="input-group p-1" style="/*border-radius: 20px;*//*border-color: white;*/">
                                <InputText @bind-Value="_model.Email" class="form-control bg-dark border-0 shadow-none text-white" type="text" placeholder="Email"/>
                            </div>
                        </div>
                        <div class="border-1 mt-3" style="border-radius: 20px;border: 1px solid #777E90;/*border-radius: 20px;*//*border-color: white;*/">
                            <div class="input-group p-1" style="/*border-radius: 20px;*//*border-color: white;*/">
                                <InputText @bind-Value="_model.Password" class="form-control bg-dark border-0 shadow-none text-white" type="password" placeholder="Password"/>
                            </div>
                        </div>
                        <li>
                            @foreach(var error in _errors)
                            {
                                <ul class="text-danger">@error</ul>
                            }
                        </li>
                        <ValidationSummary class="text-danger"/>
                        <div class="mt-4 d-flex">
                            <button class="btn btn-primary fw-bold px-3 py-2" type="submit" style="border-radius: 20px;">Sign up</button>
                            <button class="btn btn-primary fw-bold bg-dark mx-3 px-3 py-2" type="button" style="border-color: white;border-radius: 20px;border-width: 2px;" @onclick="OnSignInButtonClick">Already a member?</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</section>

@code {

    private readonly SignUpRequest _model = new();
    private List<string> _errors = new();

    private async Task HandleValidSubmitAsync()
    {
        var result = await AuthenticationClient.CreateUserAsync(_model);
        if (result.IsSuccessStatusCode)
        {
            var token = await AuthorizationClient.GetTokenAsync(new SignInRequest {UserName = _model.UserName, Password = _model.Password});
            await StateProvider.SetAuthenticationStateAsync(token.Content.Token);

            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            _errors = new()
            {
                "User name or email already exists.",
            };
            StateHasChanged();
        }
    }

    private void OnSignInButtonClick()
    {
        NavigationManager.NavigateTo("/signin");
    }

}