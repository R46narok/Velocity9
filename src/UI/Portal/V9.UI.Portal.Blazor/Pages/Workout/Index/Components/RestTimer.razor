@using V9.UI.Portal.Blazor.Pages.Workout.Index.Enums
@using System.Timers
<button data-toggle="tooltip" data-placement="top"
        class="btn btn-primary px-3 py-2 bg-dark"
        type="button"
        style="border-color: #777e90;border-radius: 20px;border-width: 3px; @(Active ? "color: #9757D7; font-weight: 700 !important;" : "")"
        title="Rest this amount of time between individual exercises.">

    @if (Active && _timeLeft.Ticks > 0)
    {
        <div>
            @_timeLeft.ToString(@"hh\:mm\:ss")
        </div>
    }
    else
    {
        <div>
            @ExtractMinutes(_time):@ExtractSeconds(_time).ToString("D2") exercise
        </div>
    }
</button>

@code {
    private double _time;
    private Timer? _timer;
    private TimeSpan _timeLeft;

    public double Time
    {
        get => _time;
        set
        {
            _time = value;
            StateHasChanged();
        }
    }

    private bool _active;

    public bool Active
    {
        get => _active;
        set
        {
            _active = value;
            if (_active) StartTimerAsync();
            StateHasChanged();
        }
    }

    private static int ExtractMinutes(double time) => (int) Math.Truncate(time);
    private static int ExtractSeconds(double time) => (int) Math.Round((time - ExtractMinutes(time)) * 60);

    private async Task StartTimerAsync()
    {
        const int ticks = 1000;
        var seconds = ExtractMinutes(_time) * 60 + ExtractSeconds(_time);

        _timeLeft = TimeSpan.FromSeconds(seconds);
        _timer = new Timer(ticks);

        _timer.Elapsed += TimerOnElapsed;
        _timer.Start();
    }

    private void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        _timeLeft = _timeLeft.Subtract(TimeSpan.FromSeconds(1));
        if (_timeLeft.Ticks <= 0)
        {
            _timer!.Stop();
        }
        InvokeAsync(StateHasChanged);
    }

}