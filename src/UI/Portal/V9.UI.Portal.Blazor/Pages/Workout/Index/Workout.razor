@attribute [Authorize]
@page "/workout/{Name?}"
@using V9.UI.Portal.Services.Workout.Contracts
@using V9.UI.Portal.Blazor.Pages.Workout.Index.Components
@using V9.UI.Portal.Blazor.Pages.Workout.Common
@using V9.UI.Portal.Services.Workout.Views
@using V9.UI.Core.Providers
@using V9.UI.Portal.Blazor.Pages.Workout.Index.Enums
@using V9.UI.Portal.Security

@inject TokenAuthenticationStateProvider Authentication
@inject IWorkoutClient WorkoutClient

<div class="container">
    <div class="row d-flex justify-content-center">
        <div class="col-3">
            <WorkoutBanner Name="@_workoutView?.Name"/>
        </div>
        <div class="col-4" style="/*color: #777E90;*/">
            <WorkoutStats CompletedOn="@_workoutView?.CompletedOn"/>
            <hr style="color: #777E90;">
            <p class="text-white">
                <span style="color: rgb(230, 232, 236);">@_workoutView?.Notes</span><br><br>
            </p>
        </div>
        <div class="col-auto">
            <div class="vr mx-2" style="color: #777E90;height: 100%;"></div>
        </div>
        <div class="col-4">
            <Clock @ref="_clock"/>
        </div>
    </div>
    <div class="row">
        <div class="col-12 text-center">
            <h1 class="mt-5 text-white">Your personalized workout</h1>
            <p style="color: #777E90;">Use <span class="fw-bold" style="color: #45B26B;">proper from</span>&nbsp;to get the best <span class="text-white fw-bold">results</span>&nbsp;possible.</p>
        </div>
    </div>
    <div class="row mt-5 d-flex justify-content-center">
        <div class="col-7 text-white">
            <div class="row pt-3" style="border-radius: 20px;background-color: #23262F;">
                <ExerciseBanner Name="@_exerciseSplit?[_exerciseActive][0].ExerciseName"
                                Sets="@_exerciseSplit?[_exerciseActive].Count"
                                OnNextButtonClicked="OnNextButtonClicked"
                                OnExpandButtonClicked="OnExpandButtonClicked"/>
            </div>
            
            <div style="animation: @(_showSets ? "fadeAndScale" : "fadeAndScaleReverse") 0.75s cubic-bezier(.39,-1.05,.58,1.95);transform-origin: center bottom;">
                @if (_showSets && _exerciseSplit?.Count > 0)
                {
                    for (int i = 0; i < _exerciseSplit?[_exerciseActive].Count; ++i)
                    {
                        <div class="row pt-3 mt-4"
                             style="width: 90%;border-radius: 20px;background-color: #23262F; @(i != _setActive ? "opacity: 0.5;" : "")">
                            <SetBanner 
                                WorkoutName="@Name" 
                                SetView="_exerciseSplit[_exerciseActive][i]" 
                                Index="@(i + 1)" 
                                Active="@(i == _setActive)"
                                OnUpdated="OnUpdated"/>
                        </div>
                    }
                }
            </div>
        </div>
        <div class="col-auto">
            <div class="vr mx-2 bg-body" style="/*color: #777E90;*//*height: 100%;*/"></div>
        </div>
        <div class="col-4">
            <GeneralGuidelines/>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string? Name { get; set; }

    private WorkoutView? _workoutView;
    private int _exerciseActive;
    private int _setActive;
    private bool _showSets;
    private List<List<SetView>>? _exerciseSplit;

    private Clock? _clock;

    protected override async Task OnInitializedAsync()
    {
        if (Name is null) throw new ArgumentNullException();
        
        Reset();
        
        var bearer = BearerHeader.Construct((await Authentication.GetTokenAsync())!);
        var response = await WorkoutClient.GetWorkoutAsync(new(Name), bearer);
        if (response.IsSuccessStatusCode)
        {
            _workoutView = response.Content;
            _exerciseSplit = _workoutView?.Sets
                .GroupBy(x => x.ExerciseName)
                .Select(x => x.ToList())
                .ToList();
        }

        _clock.Started += OnClockStarted;
        _clock.Stopped += OnClockStopped;
        _clock.TimerCompleted += OnTimerCompleted;

        StateHasChanged();
    }

    private void OnTimerCompleted(object? sender, EventArgs e)
    {
        _clock.Phase = ClockPhase.None;
        StateHasChanged();
    }

    private void OnClockStopped(object? sender, EventArgs e)
    {
        Reset();
        StateHasChanged();
    }

    private void OnClockStarted(object? sender, EventArgs e)
    {
        _showSets = true;
        StateHasChanged();
    }

    private void Reset()
    {
        _exerciseActive = 0;
        _showSets = false;
    }

    private void OnNextButtonClicked()
    {
        if (_exerciseActive >= _exerciseSplit?.Count - 1)
            _exerciseActive = 0;
        else ++_exerciseActive;

        StateHasChanged();
    }

    private void OnExpandButtonClicked()
    {
        _showSets = !_showSets;
        StateHasChanged();
    }

    private void OnUpdated(object? sender, EventArgs e)
    {
        if (_setActive < _exerciseSplit?[_exerciseActive].Count - 1)
        {
            _setActive++;
            _clock.Phase = ClockPhase.ExerciseRest;
        }
        else
        {
            _setActive = 0;
            _exerciseActive++;
            _clock.Phase = ClockPhase.SetRest;
        }
        
        StateHasChanged();
    }

}